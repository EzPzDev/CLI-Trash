#! /usr/bin/bash

# MIT License

# Copyright (c) 2022 EzPzDev

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.



# Need to update comments!!

DIR=${BASH_SOURCE[0]%/*}
. "$DIR/resources/tput-colors"
. "$DIR/resources/help"
usage="trash [option] [file/directory]"
opts="-r, --restore"
desc="[number] Restore a recently trashed file."
# the path to file without a trailing /
file=${1%/}
# file without any path that may have been included in command
deleteName=${file##*/}
workPath="$HOME/.local/share/Trash"

# create extra needed variables
variables () {
    # first permission check. if du does not work, we likely do not have permission to do anything. this may not be necessary
    size=$(du -sb "$file" 2>/dev/null) || read -p 'Permission Denied! Elevate Privledges? [y/n] ' -n 1 -re answer
    case $answer in
        y) size=$(sudo du -sb "$file") ;;
        n) printf "%s\n" "${RED}File Not Trashed!$NC"; exit 1 ;;
        '\s'*) printf "%s\n" "${RED}File Not Trashed!$NC"; exit 1 ;;
    esac
    deletePath=$(realpath "$file")
    deleteDate=$(date +"%Y-%m-%dT%H:%M:%S")
}

# loop to add a (n) to the end of the file
sameName() {
    i=1
    while [[ -e $workPath/info/"$deleteName ($i)".trashinfo ]]; do
        (( i++ ))
    done
    deleteInfo="$deleteName ($i)"
}

# function to call if target is a directory
directory() {

    # we don't need a time variable if the file is not a directory. 64 bit(ie add nanoseconds) epoch time is needed for the directorysizes file
    time=$(date -r "$workPath/info/$deleteInfo.trashinfo" '+%s%3N')
    echo "$size" >> "$workPath/directorysizes"

    # two sed commands to format the data we just redirected to the directorysizes file
    sed -i "$ s/\s*$file/ $time $deleteInfo/" "$workPath/directorysizes"
    sed -i '$ s/\s/%20/g3' "$workPath/directorysizes" && sed -i '$ s/(\([0-9]*\))/%28\1%29/g1' "$workPath/directorysizes"
}


# function to move target to trash folder
move() {

    # needed if the mv command is a recent version
    updatedGnu=$(mv --help | grep -o ' --no-copy')
    mv $updatedGnu "$file" "$workPath/files/$deleteInfo" 2> /dev/null || if [[ -z "$REPLY" ]]; then
        read -p 'Permission Denied! Elevate Privledges? [y/n] ' -n 1 -re answer
        case $answer in
            y) sudo mv "$file" "$workPath/files/$deleteInfo"; sudo chown "$LOGNAME:$LOGNAME" "$workPath/files/$deleteInfo" ;;
            n) printf "%s\n" "${RED}File Not Trashed!$NC"; exit 1 ;;
            '\s'*) printf "%s\n" "${RED}File Not Trashed!$NC"; exit 1 ;;
        esac
    else
        sudo mv "$file" "$workPath/files/$deleteInfo" && sudo chown "$LOGNAME:$LOGNAME" "$workPath/files/$deleteInfo"
    fi
}


# function to restore a recently trashed file/dir
restore() {

    foundFile=$selected
    parentOwner=$(stat -c '%U' .)
    trimFile=$(printf "$foundFile" | sed 's/\ (.*)//')

    if [[ -e ./$trimFile ]]; then
        i=1
        while [[ -e ./"$trimFile ($i)" ]]; do
            (( i++ ))
        done
        finalFile="$trimFile ($i)"
    else
        finalFile=$trimFile
    fi
    if [[ $parentOwner == "$LOGNAME" ]]; then
        mv "$workPath/files/$foundFile" "./$finalFile"
    else
        read -p "Restoring To Directory Not Owned By You, sudo? [y/n] " -n 1 -re REPLY
        case $REPLY in
            y) sudo mv "$workPath/files/$foundFile" "./$finalFile";
                sudo chown "$parentOwner:$parentOwner" ./"$finalFile" ;;
            n) printf "%s\n" "${RED}$finalFile Not Restored!$NC"; exit 1 ;;
            '\s'*) printf "%s\n" "$RED$finalFile Not Restored!$NC" ;;
        esac
    fi
    rm "$workPath/info/$foundFile.trashinfo"
    [[ -d $1./$finalFile ]] && sed -i "/$foundFile/d" "$workPath/directorysizes"

    good="'$finalFile' ${GREEN}Restored!$NC"
    bad="${RED}File not Restored!$NC"
    endScript
}


selection () {
    IFS=$'\n'
    printf "%s\n" "Last 5 Items Trashed:"
    PS3="Select Number To Restore: "

    items=($(find $HOME/.local/share/Trash/files/ -maxdepth 1 -mindepth 1  -printf '%C@ %P\n' | sort -r | sed 's/^\S* //'))

    while true; do
        select item in "${items[@]:0:5}" Quit
        do
            case $REPLY in
                6) printf "\n%s\n" "Exiting!"; exit 0 ;;
                q*) printf "\n%s\n" "Exiting!"; exit 0 ;;
                e*) printf "\n%s\n" "Exiting!"; exit 0 ;;
                [1-5]) selected=$item; printf "\n%s\n" "${GREEN}Restoring $item!$NC"; break 2 ;;
                ?) selected=${items[0]}; printf "\n%s\n" "$RED$REPLY Not Found,$NC Restoring Last Trashed Item! (${items[0]})"; break 2 ;;
            esac
        done
    done
}


endScript () {

    # trashpandas if everything executed correctly, no pandas if not
    if [[ $? == 0 ]]; then
        printf "\n%s\n" "$good"
    else
        printf "\n%s\n" "$bad"
    fi
    exit
}


# exit script if there are any weird / or the file doesn't exist
if [[ $deleteName == */ ]]; then
    printf "%s\n" "${RED}File has too many /$NC"
    exit 1
fi

options=$(getopt -n "trash" -l "restore,help," -o "hr" -- "$@")

[[ -z "$1" ]] && printf "%s\n" "'${0##*/}' Needs an Option!" && exit 1

eval set -- "$options"

while :; do
    case $1 in
        -r | --restore) selection; restore "$2"; exit 0 ;;
        -h | --help) getHelp; exit 0 ;;
        -- ) shift; break ;;
        *) print "%s\n" "$1 Is Not An Option!"; exit 1 ;;
    esac
    shift
done

if [[ -e "$file" ]]; then
    # create directories if they do not exist
    if [[ ! -e $workPath/files ]]; then
        mkdir -p "$workPath/files" "$workPath/info"
    fi
    # if target has the same name as a file/dir in trash call sameName
    if [[ -e $workPath/info/"$deleteName".trashinfo ]]; then
        sameName
    else
        # if loop was not needed we still create this variable to use in place of deleteName for rest of script
        deleteInfo="$deleteName"
    fi
    # actually moving the file to the trash folder.
    variables "$@"
    move
    # create the .trashinfo file
    echo "[Trash Info]
Path=$deletePath
DeletionDate=$deleteDate
    " > "$workPath/info/$deleteInfo.trashinfo"
    # this next steps are needed if the file is a directory
    if [[ -d "$workPath/files/$deleteInfo" ]]; then
        directory
    fi
else
    [[ ! -e "$file" ]] && printf "\n%s\n" "$RED$file is missing!$NC"
    exit 1
fi
good="$GREEN $NC '$deleteName' Trashed! $GREEN $NC"
bad="${RED}Error$NC Occured, File(s) May Not Be Deleted!"
endScript
